// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DomnumDbContext))]
    [Migration("20250508170711_MudaTipoTokenActivate")]
    partial class MudaTipoTokenActivate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Abstracts.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamptz");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("StripeCustomerId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("StripeSubscriptionId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubscriptionType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id")
                        .HasName("PK_Subscriptions");

                    b.HasIndex("StudentId");

                    b.ToTable("Subscriptions", null, t =>
                        {
                            t.Property("EndDate")
                                .HasColumnName("Subscription_EndDate");

                            t.Property("StartDate")
                                .HasColumnName("Subscription_StartDate");
                        });

                    b.HasDiscriminator<string>("SubscriptionType").HasValue("Subscription");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Core.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("IAid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long>("Subscribes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalHours")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id")
                        .HasName("PK_Courses");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IAid");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.IA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("IAs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Lecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tempo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("VideoId")
                        .HasColumnType("uuid");

                    b.Property<long>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Lectures", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool?>("FreeCourse")
                        .HasColumnType("boolean")
                        .HasColumnName("FreeCourse");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id")
                        .HasName("PK_Parameters");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Parameters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Slug");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsFreeStudent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PictureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id")
                        .HasName("PK_Teachers");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("Active");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("StudentId");

                    b.Property<Guid?>("TokenActivate")
                        .HasColumnType("uuid")
                        .HasColumnName("TokenActivate");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Core.Video", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("BucketName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ContentType")
                        .HasColumnType("varchar")
                        .HasColumnName("ContentType");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("LectureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("UrlExpired")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("LectureId")
                        .IsUnique();

                    b.ToTable("Videos", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payments.StripeWebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("EventId");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("PayloadJson");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("ReceivedAt");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id")
                        .HasName("PK_StripeWebhookEvents");

                    b.ToTable("StripeWebhookEvents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Ativo");

                    b.Property<string>("BucketName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("BucketName");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .HasColumnType("varchar")
                        .HasColumnName("ContentType");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("IAId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("UrlExpired")
                        .HasColumnType("timestamptz")
                        .HasColumnName("UrlExpired");

                    b.HasKey("Id")
                        .HasName("PK_Pictures");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("IAId")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("Pictures", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Relationships.StudentCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Relationships.StudentLecture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LectureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LectureId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLectures", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Domain.Entities.Payments.FreeSubscription", b =>
                {
                    b.HasBaseType("Domain.Entities.Abstracts.Subscription");

                    b.ToTable("Subscriptions", t =>
                        {
                            t.Property("EndDate")
                                .HasColumnName("Subscription_EndDate");

                            t.Property("StartDate")
                                .HasColumnName("Subscription_StartDate");
                        });

                    b.HasDiscriminator().HasValue("Free");
                });

            modelBuilder.Entity("Domain.Entities.Payments.PremiumSubscription", b =>
                {
                    b.HasBaseType("Domain.Entities.Abstracts.Subscription");

                    b.ToTable("Subscriptions", t =>
                        {
                            t.Property("EndDate")
                                .HasColumnName("Subscription_EndDate");

                            t.Property("StartDate")
                                .HasColumnName("Subscription_StartDate");
                        });

                    b.HasDiscriminator().HasValue("Premium");
                });

            modelBuilder.Entity("Domain.Entities.Abstracts.Subscription", b =>
                {
                    b.HasOne("Domain.Entities.Core.Student", "Student")
                        .WithMany("Subscriptions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.PaymentDetails", "Payment", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PaymentGateway")
                                .HasMaxLength(50)
                                .HasColumnType("varchar")
                                .HasColumnName("PaymentProvider");

                            b1.Property<string>("TransactionId")
                                .HasColumnType("varchar")
                                .HasColumnName("TransactionId");

                            b1.HasKey("SubscriptionId");

                            b1.ToTable("Subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");
                        });

                    b.OwnsOne("Domain.ValueObjects.SubscriptionPeriod", "Period", b1 =>
                        {
                            b1.Property<Guid>("SubscriptionId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamptz")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamptz")
                                .HasColumnName("StartDate");

                            b1.HasKey("SubscriptionId");

                            b1.ToTable("Subscriptions");

                            b1.WithOwner()
                                .HasForeignKey("SubscriptionId");
                        });

                    b.Navigation("Payment");

                    b.Navigation("Period")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Core.Category", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Description");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Course", b =>
                {
                    b.HasOne("Domain.Entities.Core.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.IA", "IA")
                        .WithMany("Courses")
                        .HasForeignKey("IAid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.BigString", "AboutDescription", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("character varying(300)")
                                .HasColumnName("AboutDescription");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Description");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "GitHubUrl", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("GitHubUrl");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "NotionUrl", b1 =>
                        {
                            b1.Property<Guid>("CourseId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("NotionUrl");

                            b1.HasKey("CourseId");

                            b1.ToTable("Courses");

                            b1.WithOwner()
                                .HasForeignKey("CourseId");
                        });

                    b.Navigation("AboutDescription")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("GitHubUrl");

                    b.Navigation("IA");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("NotionUrl")
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Entities.Core.IA", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("IAId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("IAId");

                            b1.ToTable("IAs");

                            b1.WithOwner()
                                .HasForeignKey("IAId");
                        });

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Domain.Entities.Core.Lecture", b =>
                {
                    b.HasOne("Domain.Entities.Core.Module", "Module")
                        .WithMany("Lectures")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Url", "GithubUrl", b1 =>
                        {
                            b1.Property<Guid>("LectureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("GithubUrl");

                            b1.HasKey("LectureId");

                            b1.ToTable("Lectures");

                            b1.WithOwner()
                                .HasForeignKey("LectureId");
                        });

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("LectureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("LectureId");

                            b1.ToTable("Lectures");

                            b1.WithOwner()
                                .HasForeignKey("LectureId");
                        });

                    b.Navigation("GithubUrl")
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Module", b =>
                {
                    b.HasOne("Domain.Entities.Core.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ModuleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("Description");

                            b1.HasKey("ModuleId");

                            b1.ToTable("Modules");

                            b1.WithOwner()
                                .HasForeignKey("ModuleId");
                        });

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ModuleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("ModuleId");

                            b1.ToTable("Modules");

                            b1.WithOwner()
                                .HasForeignKey("ModuleId");
                        });

                    b.Navigation("Course");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Parameter", b =>
                {
                    b.HasOne("Domain.Entities.Core.Course", "Course")
                        .WithOne("Parameters")
                        .HasForeignKey("Domain.Entities.Core.Parameter", "CourseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("ParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("Description");

                            b1.HasKey("ParameterId");

                            b1.ToTable("Parameters");

                            b1.WithOwner()
                                .HasForeignKey("ParameterId");
                        });

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("ParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Name");

                            b1.HasKey("ParameterId");

                            b1.ToTable("Parameters");

                            b1.WithOwner()
                                .HasForeignKey("ParameterId");
                        });

                    b.Navigation("Course");

                    b.Navigation("Description");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("Domain.Entities.Core.Role", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("RoleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Name");

                            b1.HasKey("RoleId");

                            b1.ToTable("Roles");

                            b1.WithOwner()
                                .HasForeignKey("RoleId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Student", b =>
                {
                    b.HasOne("Domain.Entities.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("StudentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("StudentId");

                            b1.ToTable("Students");

                            b1.WithOwner()
                                .HasForeignKey("StudentId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Core.Teacher", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Description", "Description", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("Description");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Email");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.BigString", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(300)
                                .HasColumnType("varchar")
                                .HasColumnName("Endereco");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "GitHub", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("GitHub");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "Instagram", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("Instagram");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.UniqueName", "Name", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Name");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "Tiktok", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("Tiktok");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Cpf", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("TeacherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("varchar")
                                .HasColumnName("Cpf");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teachers");

                            b1.WithOwner()
                                .HasForeignKey("TeacherId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("GitHub");

                    b.Navigation("Instagram");

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Tiktok");
                });

            modelBuilder.Entity("Domain.Entities.Core.User", b =>
                {
                    b.HasOne("Domain.Entities.Core.Student", "Student")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Core.User", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Complement")
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Complement");

                            b1.Property<string>("NeighBordHood")
                                .HasColumnType("varchar")
                                .HasColumnName("NeighborHood");

                            b1.Property<long?>("Number")
                                .HasColumnType("bigint")
                                .HasColumnName("Number");

                            b1.Property<string>("Road")
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("Road");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Hash")
                                .HasColumnType("varchar")
                                .HasColumnName("Hash");

                            b1.Property<string>("Salt")
                                .HasColumnType("varchar")
                                .HasColumnName("Salt");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Core.Video", b =>
                {
                    b.HasOne("Domain.Entities.Core.Course", "Course")
                        .WithOne("Trailer")
                        .HasForeignKey("Domain.Entities.Core.Video", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Core.Lecture", "Lecture")
                        .WithOne("Video")
                        .HasForeignKey("Domain.Entities.Core.Video", "LectureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.ValueObjects.BigString", "AwsKey", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("AwsKey");

                            b1.HasKey("VideoId");

                            b1.ToTable("Videos");

                            b1.WithOwner()
                                .HasForeignKey("VideoId");
                        });

                    b.OwnsOne("Domain.ValueObjects.BigString", "TemporaryPath", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("TemporaryPath");

                            b1.HasKey("VideoId");

                            b1.ToTable("Videos");

                            b1.WithOwner()
                                .HasForeignKey("VideoId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "UrlTemp", b1 =>
                        {
                            b1.Property<Guid>("VideoId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("UrlTemp");

                            b1.HasKey("VideoId");

                            b1.ToTable("Videos");

                            b1.WithOwner()
                                .HasForeignKey("VideoId");
                        });

                    b.Navigation("AwsKey");

                    b.Navigation("Course");

                    b.Navigation("Lecture");

                    b.Navigation("TemporaryPath");

                    b.Navigation("UrlTemp");
                });

            modelBuilder.Entity("Domain.Entities.Picture", b =>
                {
                    b.HasOne("Domain.Entities.Core.Category", "Category")
                        .WithOne("Picture")
                        .HasForeignKey("Domain.Entities.Picture", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Core.Course", "Course")
                        .WithOne("Picture")
                        .HasForeignKey("Domain.Entities.Picture", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Core.IA", "IA")
                        .WithOne("Picture")
                        .HasForeignKey("Domain.Entities.Picture", "IAId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Core.Student", "Student")
                        .WithOne("Picture")
                        .HasForeignKey("Domain.Entities.Picture", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Core.Teacher", "Teacher")
                        .WithOne("Picture")
                        .HasForeignKey("Domain.Entities.Picture", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.ValueObjects.BigString", "AwsKey", b1 =>
                        {
                            b1.Property<Guid>("PictureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("AwsKey");

                            b1.HasKey("PictureId");

                            b1.ToTable("Pictures");

                            b1.WithOwner()
                                .HasForeignKey("PictureId");
                        });

                    b.OwnsOne("Domain.ValueObjects.BigString", "TemporaryPath", b1 =>
                        {
                            b1.Property<Guid>("PictureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("TemporaryPath");

                            b1.HasKey("PictureId");

                            b1.ToTable("Pictures");

                            b1.WithOwner()
                                .HasForeignKey("PictureId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Url", "UrlTemp", b1 =>
                        {
                            b1.Property<Guid>("PictureId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Endereco")
                                .HasMaxLength(255)
                                .HasColumnType("varchar")
                                .HasColumnName("UrlTemp");

                            b1.HasKey("PictureId");

                            b1.ToTable("Pictures");

                            b1.WithOwner()
                                .HasForeignKey("PictureId");
                        });

                    b.Navigation("AwsKey");

                    b.Navigation("Category");

                    b.Navigation("Course");

                    b.Navigation("IA");

                    b.Navigation("Student");

                    b.Navigation("Teacher");

                    b.Navigation("TemporaryPath");

                    b.Navigation("UrlTemp");
                });

            modelBuilder.Entity("Domain.Entities.Relationships.StudentCourse", b =>
                {
                    b.HasOne("Domain.Entities.Core.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Domain.Entities.Relationships.StudentLecture", b =>
                {
                    b.HasOne("Domain.Entities.Core.Course", "Course")
                        .WithMany("StudentLectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.Core.Lecture", "Lecture")
                        .WithMany("StudentLectures")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.Student", "Student")
                        .WithMany("StudentLectures")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecture");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Core.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Category", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Picture")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Course", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Parameters");

                    b.Navigation("Picture")
                        .IsRequired();

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentLectures");

                    b.Navigation("Trailer")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.IA", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Domain.Entities.Core.Lecture", b =>
                {
                    b.Navigation("StudentLectures");

                    b.Navigation("Video")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Core.Module", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("Domain.Entities.Core.Student", b =>
                {
                    b.Navigation("Picture")
                        .IsRequired();

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentLectures");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Entities.Core.Teacher", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Picture")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
